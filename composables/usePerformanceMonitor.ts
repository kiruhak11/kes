interface PerformanceMetrics {
  fcp: number; // First Contentful Paint
  lcp: number; // Largest Contentful Paint
  fid: number; // First Input Delay
  cls: number; // Cumulative Layout Shift
  ttfb: number; // Time to First Byte
  domContentLoaded: number;
  loadComplete: number;
  memoryUsage: number;
  connectionSpeed: string;
}

export const usePerformanceMonitor = () => {
  const metrics = ref<Partial<PerformanceMetrics>>({});
  const isMonitoring = ref(false);
  const performanceScore = ref(0);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  const startMonitoring = () => {
    if (!process.client || isMonitoring.value) return;
    
    isMonitoring.value = true;
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Web Vitals
    monitorWebVitals();
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    monitorPageLoad();
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏
    monitorMemoryUsage();
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    monitorConnection();
    
    // –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Å–∫–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    calculatePerformanceScore();
  };

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Web Vitals
  const monitorWebVitals = () => {
    if (!('PerformanceObserver' in window)) return;

    // First Contentful Paint
    const fcpObserver = new PerformanceObserver((list) => {
      const entries = list.getEntries();
      const fcpEntry = entries.find(entry => entry.name === 'first-contentful-paint');
      if (fcpEntry) {
        metrics.value.fcp = fcpEntry.startTime;
        console.log(`üé® FCP: ${fcpEntry.startTime.toFixed(2)}ms`);
      }
    });
    fcpObserver.observe({ entryTypes: ['paint'] });

    // Largest Contentful Paint
    const lcpObserver = new PerformanceObserver((list) => {
      const entries = list.getEntries();
      const lastEntry = entries[entries.length - 1];
      metrics.value.lcp = lastEntry.startTime;
      console.log(`üñºÔ∏è LCP: ${lastEntry.startTime.toFixed(2)}ms`);
    });
    lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });

    // First Input Delay
    const fidObserver = new PerformanceObserver((list) => {
      const entries = list.getEntries();
      entries.forEach((entry: any) => {
        const fid = entry.processingStart - entry.startTime;
        metrics.value.fid = fid;
        console.log(`‚ö° FID: ${fid.toFixed(2)}ms`);
      });
    });
    fidObserver.observe({ entryTypes: ['first-input'] });

    // Cumulative Layout Shift
    let clsValue = 0;
    const clsObserver = new PerformanceObserver((list) => {
      const entries = list.getEntries();
      entries.forEach((entry: any) => {
        if (!entry.hadRecentInput) {
          clsValue += entry.value;
        }
      });
      metrics.value.cls = clsValue;
      console.log(`üìê CLS: ${clsValue.toFixed(4)}`);
    });
    clsObserver.observe({ entryTypes: ['layout-shift'] });
  };

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const monitorPageLoad = () => {
    if (!('performance' in window)) return;

    const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
    
    if (navigation) {
      metrics.value.ttfb = navigation.responseStart - navigation.requestStart;
      metrics.value.domContentLoaded = navigation.domContentLoadedEventEnd - navigation.navigationStart;
      metrics.value.loadComplete = navigation.loadEventEnd - navigation.navigationStart;
      
      console.log(`üåê TTFB: ${metrics.value.ttfb.toFixed(2)}ms`);
      console.log(`üìÑ DOM Ready: ${metrics.value.domContentLoaded.toFixed(2)}ms`);
      console.log(`‚úÖ Load Complete: ${metrics.value.loadComplete.toFixed(2)}ms`);
    }
  };

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
  const monitorMemoryUsage = () => {
    if (!('memory' in performance)) return;

    const updateMemoryUsage = () => {
      const memory = (performance as any).memory;
      metrics.value.memoryUsage = memory.usedJSHeapSize / 1024 / 1024; // MB
      console.log(`üß† Memory: ${metrics.value.memoryUsage.toFixed(2)}MB`);
    };

    updateMemoryUsage();
    setInterval(updateMemoryUsage, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  };

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const monitorConnection = () => {
    const connection = (navigator as any).connection;
    if (connection) {
      metrics.value.connectionSpeed = connection.effectiveType;
      console.log(`üì° Connection: ${connection.effectiveType} (${connection.downlink}Mbps)`);
      
      // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      connection.addEventListener('change', () => {
        metrics.value.connectionSpeed = connection.effectiveType;
        console.log(`üì° Connection changed: ${connection.effectiveType}`);
      });
    }
  };

  // –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Å–∫–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const calculatePerformanceScore = () => {
    const calculate = () => {
      let score = 100;
      
      // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
      if (metrics.value.fcp && metrics.value.fcp > 1800) score -= 20;
      if (metrics.value.lcp && metrics.value.lcp > 2500) score -= 25;
      if (metrics.value.fid && metrics.value.fid > 100) score -= 20;
      if (metrics.value.cls && metrics.value.cls > 0.1) score -= 15;
      if (metrics.value.ttfb && metrics.value.ttfb > 600) score -= 10;
      if (metrics.value.loadComplete && metrics.value.loadComplete > 3000) score -= 10;
      
      performanceScore.value = Math.max(0, score);
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —ç–º–æ–¥–∑–∏
      const emoji = score >= 90 ? 'üöÄ' : score >= 70 ? '‚ö°' : score >= 50 ? 'üêå' : 'üê¢';
      console.log(`${emoji} Performance Score: ${score}/100`);
    };

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    setTimeout(calculate, 5000);
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç—Ä–∏–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  const sendMetricsToServer = async () => {
    if (!process.client) return;

    try {
      await fetch('/api/analytics/performance', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          metrics: metrics.value,
          score: performanceScore.value,
          userAgent: navigator.userAgent,
          url: window.location.href,
          timestamp: Date.now(),
        }),
      });
    } catch (error) {
      console.warn('Failed to send performance metrics:', error);
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  const getOptimizationSuggestions = () => {
    const suggestions: string[] = [];
    
    if (metrics.value.fcp && metrics.value.fcp > 1800) {
      suggestions.push('–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π CSS –∏ —É–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã');
    }
    
    if (metrics.value.lcp && metrics.value.lcp > 2500) {
      suggestions.push('–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ CDN');
    }
    
    if (metrics.value.fid && metrics.value.fid > 100) {
      suggestions.push('–£–º–µ–Ω—å—à–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è JavaScript');
    }
    
    if (metrics.value.cls && metrics.value.cls > 0.1) {
      suggestions.push('–ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∏–∑–±–µ–≥–∞–π—Ç–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
    }
    
    if (metrics.value.memoryUsage && metrics.value.memoryUsage > 50) {
      suggestions.push('–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∏ –æ—á–∏—Å—Ç–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã');
    }
    
    return suggestions;
  };

  // –≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫ –≤ JSON
  const exportMetrics = () => {
    const data = {
      metrics: metrics.value,
      score: performanceScore.value,
      suggestions: getOptimizationSuggestions(),
      timestamp: new Date().toISOString(),
      url: process.client ? window.location.href : '',
    };
    
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `performance-metrics-${Date.now()}.json`;
    a.click();
    URL.revokeObjectURL(url);
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  onMounted(() => {
    if (process.client) {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
      if (document.readyState === 'complete') {
        startMonitoring();
      } else {
        window.addEventListener('load', startMonitoring);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
      setTimeout(sendMetricsToServer, 10000);
    }
  });

  return {
    metrics: readonly(metrics),
    performanceScore: readonly(performanceScore),
    isMonitoring: readonly(isMonitoring),
    startMonitoring,
    getOptimizationSuggestions,
    exportMetrics,
    sendMetricsToServer,
  };
};