// server/api/contact.post.ts
import { readBody, createError, defineEventHandler } from "h3";
import { useRuntimeConfig } from "#imports";
import prisma from "~/server/utils/prisma";

export default defineEventHandler(async (event) => {
  try {
    const config = useRuntimeConfig();
    const { telegramBotToken, telegramChatId } = config.public;

    // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('Environment check:', {
      hasTelegramToken: !!telegramBotToken,
      hasChatId: !!telegramChatId,
      tokenLength: telegramBotToken?.length || 0,
      chatIdLength: telegramChatId?.length || 0,
      nodeEnv: process.env.NODE_ENV,
      allEnvVars: Object.keys(process.env).filter(key => key.includes('TELEGRAM'))
    });

    // Validate environment variables
    if (!telegramBotToken || !telegramChatId) {
      console.error("Missing Telegram configuration:", {
        hasTelegramToken: !!telegramBotToken,
        hasChatId: !!telegramChatId,
      });
      throw createError({
        statusCode: 500,
        statusMessage:
          "Server configuration error: Missing Telegram credentials",
      });
    }

    // —á–∏—Ç–∞–µ–º —Ç–µ–ª–æ
    const body = await readBody<{ text?: string }>(event);
    if (!body || typeof body.text !== "string" || !body.text.trim()) {
      // –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—è text ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–Ω—è—Ç–Ω—ã–π 400
      throw createError({
        statusCode: 400,
        statusMessage: "Bad Request: body.text is required",
      });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Prisma
    let dbSuccess = false;
    try {
      const requestData = {
        type: body.text.includes("üõí") ? "order" : "contact",
        phone: body.text.match(/–¢–µ–ª–µ—Ñ–æ–Ω: (.*?)(?:\n|$)/)?.[1] || "",
        region: body.text.match(/–†–µ–≥–∏–æ–Ω: (.*?)(?:\n|$)/)?.[1] || "",
        type_building: body.text.match(/–¢–∏–ø –∑–¥–∞–Ω–∏—è: (.*?)(?:\n|$)/)?.[1] || "",
        fuel_type: body.text.match(/–í–∏–¥ —Ç–æ–ø–ª–∏–≤–∞: (.*?)(?:\n|$)/)?.[1] || "",
        power_type: body.text.match(/–¢–∏–ø –º–æ—â–Ω–æ—Å—Ç–∏: (.*?)(?:\n|$)/)?.[1] || "",
        raw_text: body.text,
        status: "new",
      };
      await prisma.requests.create({ data: requestData });
      dbSuccess = true;
      console.log('Request saved to database successfully');
    } catch (dbError: any) {
      console.error('Database error:', dbError);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
    }

    // —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ Telegram
    const url = `https://api.telegram.org/bot${telegramBotToken}/sendMessage`;
    const params = {
      chat_id: telegramChatId,
      text: body.text,
      parse_mode: "HTML",
    };

    try {
      console.log('Sending to Telegram:', {
        url: url.replace(telegramBotToken, '[REDACTED]'),
        chatId: telegramChatId,
        textLength: body.text.length
      });

      const result = await $fetch(url, {
        method: "POST",
        body: params,
      });
      
      return { 
        ok: true, 
        result,
        savedToDb: dbSuccess,
        telegramSent: true
      };
    } catch (err: any) {
      console.error("Telegram API error:", {
        error: err,
        url: url.replace(telegramBotToken, "[REDACTED]"),
        params: { ...params, text: "[REDACTED]" },
        statusCode: err.statusCode,
        statusMessage: err.statusMessage,
        message: err.message
      });
      
      // –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö
      if (dbSuccess) {
        return {
          ok: true,
          message: 'Request saved to database, but Telegram notification failed',
          savedToDb: true,
          telegramSent: false,
          telegramError: err.message
        };
      }
      
      throw createError({
        statusCode: err.statusCode || 502,
        statusMessage: `Telegram API Error: ${err.message}`,
      });
    }
  } catch (e: any) {
    console.error("POST /api/contact error:", e);
    
    // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 400
    if (e.statusCode === 400) {
      throw e;
    }
    
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 500
    throw createError({
      statusCode: e.statusCode || 500,
      statusMessage: e.statusMessage || "Internal Server Error",
    });
  }
});
