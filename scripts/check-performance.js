#!/usr/bin/env node

/**
 * üöÄ –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º
 */

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...\n');

const checks = [];
let allPassed = true;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
function addCheck(name, passed, message) {
  checks.push({ name, passed, message });
  if (!passed) allPassed = false;
  
  const icon = passed ? '‚úÖ' : '‚ùå';
  console.log(`${icon} ${name}: ${message}`);
}

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nuxt
console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
try {
  const configPath = path.join(process.cwd(), 'nuxt.config.ts');
  const config = fs.readFileSync(configPath, 'utf8');
  
  addCheck(
    'Nuxt Config',
    config.includes('minify: "esbuild"') && config.includes('ssr: true'),
    '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'
  );
  
  addCheck(
    'Route Rules',
    config.includes('routeRules') && config.includes('prerender: true'),
    '–ü—Ä–∞–≤–∏–ª–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'
  );
  
  addCheck(
    'Image Optimization',
    config.includes('format: ["avif", "webp", "jpg"]'),
    '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω–∞'
  );
} catch (error) {
  addCheck('Nuxt Config', false, '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
}

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
console.log('\nüîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤...');
const pluginsDir = path.join(process.cwd(), 'plugins');
const requiredPlugins = [
  'preload.client.ts',
  'performance.client.ts',
  'sw.client.ts',
  'fonts.client.ts',
  'resource-optimizer.client.ts',
  'performance-init.client.ts'
];

requiredPlugins.forEach(plugin => {
  const pluginPath = path.join(pluginsDir, plugin);
  const exists = fs.existsSync(pluginPath);
  addCheck(`Plugin ${plugin}`, exists, exists ? '–ù–∞–π–¥–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
});

// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–∑–∞–±–ª–æ–≤
console.log('\nüß© –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–∑–∞–±–ª–æ–≤...');
const composablesDir = path.join(process.cwd(), 'composables');
const requiredComposables = [
  'useOptimizedFetch.ts',
  'useOptimizedImages.ts',
  'useOptimizedAnimations.ts',
  'useOptimizedScroll.ts',
  'useMemoryOptimization.ts',
  'useCriticalCSS.ts',
  'useAPIOptimization.ts',
  'usePerformanceMonitor.ts'
];

requiredComposables.forEach(composable => {
  const composablePath = path.join(composablesDir, composable);
  const exists = fs.existsSync(composablePath);
  addCheck(`Composable ${composable}`, exists, exists ? '–ù–∞–π–¥–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
});

// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Service Worker
console.log('\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ Service Worker...');
const swPath = path.join(process.cwd(), 'public', 'sw.js');
const swExists = fs.existsSync(swPath);
addCheck('Service Worker', swExists, swExists ? '–ù–∞–π–¥–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');

if (swExists) {
  const swContent = fs.readFileSync(swPath, 'utf8');
  addCheck(
    'SW Caching',
    swContent.includes('cache-first') && swContent.includes('network-first'),
    '–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'
  );
}

// 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª–µ–π –∞–Ω–∏–º–∞—Ü–∏–π
console.log('\nüé® –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª–µ–π...');
const animationsPath = path.join(process.cwd(), 'assets', 'styles', 'animations.scss');
const animationsExist = fs.existsSync(animationsPath);
addCheck('Animations CSS', animationsExist, animationsExist ? '–ù–∞–π–¥–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');

// 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ middleware
console.log('\nüõ£Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ middleware...');
const middlewarePath = path.join(process.cwd(), 'middleware', 'performance.global.ts');
const middlewareExists = fs.existsSync(middlewarePath);
addCheck('Performance Middleware', middlewareExists, middlewareExists ? '–ù–∞–π–¥–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');

// 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json
console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
try {
  const packagePath = path.join(process.cwd(), 'package.json');
  const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
  
  const requiredDeps = ['@nuxt/image', '@vueuse/nuxt', 'chart.js'];
  const hasAllDeps = requiredDeps.every(dep => 
    packageJson.dependencies[dep] || packageJson.devDependencies[dep]
  );
  
  addCheck('Dependencies', hasAllDeps, '–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
} catch (error) {
  addCheck('Dependencies', false, '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
}

// 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
console.log('\nüèóÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏...');
try {
  const outputDir = path.join(process.cwd(), '.output');
  if (fs.existsSync(outputDir)) {
    const serverDir = path.join(outputDir, 'server');
    const publicDir = path.join(outputDir, 'public');
    
    addCheck('Build Output', fs.existsSync(serverDir), '–°–µ—Ä–≤–µ—Ä–Ω–∞—è —Å–±–æ—Ä–∫–∞ –Ω–∞–π–¥–µ–Ω–∞');
    addCheck('Public Assets', fs.existsSync(publicDir), '–ü—É–±–ª–∏—á–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –Ω–∞–π–¥–µ–Ω—ã');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –±–∞–Ω–¥–ª–æ–≤
    const publicFiles = fs.readdirSync(publicDir, { recursive: true });
    const jsFiles = publicFiles.filter(file => file.toString().endsWith('.js'));
    const cssFiles = publicFiles.filter(file => file.toString().endsWith('.css'));
    
    addCheck('JS Bundles', jsFiles.length > 0, `–ù–∞–π–¥–µ–Ω–æ ${jsFiles.length} JS —Ñ–∞–π–ª–æ–≤`);
    
    // CSS –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–ª–∞–π–Ω–µ–Ω –≤ JS –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (cssFiles.length > 0) {
      addCheck('CSS Bundles', true, `–ù–∞–π–¥–µ–Ω–æ ${cssFiles.length} CSS —Ñ–∞–π–ª–æ–≤`);
    } else {
      addCheck('CSS Optimization', true, 'CSS –∏–Ω–ª–∞–π–Ω–µ–Ω –≤ JS (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)');
    }
  } else {
    addCheck('Build Output', false, '–°–±–æ—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ npm run build');
  }
} catch (error) {
  addCheck('Build Check', false, '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–±–æ—Ä–∫–∏');
}

// –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
console.log('\n' + '='.repeat(50));
console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
console.log('='.repeat(50));

const passed = checks.filter(c => c.passed).length;
const total = checks.length;
const percentage = Math.round((passed / total) * 100);

console.log(`\n‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}/${total} (${percentage}%)`);

if (allPassed) {
  console.log('\nüöÄ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –°–∞–π—Ç –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é!');
  console.log('\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. npm run build');
  console.log('2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  console.log('3. –î–µ–ø–ª–æ–π—Ç–µ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω');
  console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ Lighthouse');
} else {
  console.log('\n‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º:');
  checks.filter(c => !c.passed).forEach(check => {
    console.log(`   ‚Ä¢ ${check.name}: ${check.message}`);
  });
}

console.log('\n' + '='.repeat(50));

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
console.log('‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ npm run build –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–±–æ—Ä–∫–∏');
console.log('‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ –º–µ–¥–ª–µ–Ω–Ω–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏');
console.log('‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ Lighthouse –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è');
console.log('‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');

process.exit(allPassed ? 0 : 1);